// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=17b3b1f090c3ea48.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace chat {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Protocol {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_chat_GetScreenRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::chat.GetScreenRequest, global::chat.GetScreenRequest.Builder> internal__static_chat_GetScreenRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_chat_LoginRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::chat.LoginRequest, global::chat.LoginRequest.Builder> internal__static_chat_LoginRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_chat_LoginResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::chat.LoginResponse, global::chat.LoginResponse.Builder> internal__static_chat_LoginResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_chat_Friend__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::chat.Friend, global::chat.Friend.Builder> internal__static_chat_Friend__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_chat_GetFriendsResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::chat.GetFriendsResponse, global::chat.GetFriendsResponse.Builder> internal__static_chat_GetFriendsResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_chat_SendMessageRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::chat.SendMessageRequest, global::chat.SendMessageRequest.Builder> internal__static_chat_SendMessageRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_chat_FriendNotification__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::chat.FriendNotification, global::chat.FriendNotification.Builder> internal__static_chat_FriendNotification__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_chat_GetScreenResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::chat.GetScreenResponse, global::chat.GetScreenResponse.Builder> internal__static_chat_GetScreenResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_chat_MessageNotification__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::chat.MessageNotification, global::chat.MessageNotification.Builder> internal__static_chat_MessageNotification__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_chat_WelcomeNotification__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::chat.WelcomeNotification, global::chat.WelcomeNotification.Builder> internal__static_chat_WelcomeNotification__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_chat_ScreenNotification__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::chat.ScreenNotification, global::chat.ScreenNotification.Builder> internal__static_chat_ScreenNotification__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_chat_Request__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::chat.Request, global::chat.Request.Builder> internal__static_chat_Request__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_chat_Response__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::chat.Response, global::chat.Response.Builder> internal__static_chat_Response__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_chat_Notification__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::chat.Notification, global::chat.Notification.Builder> internal__static_chat_Notification__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_chat_Message__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::chat.Message, global::chat.Message.Builder> internal__static_chat_Message__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static Protocol() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5Qcm90b2NvbC5wcm90bxIEY2hhdCIkChBHZXRTY3JlZW5SZXF1ZXN0EhAK", 
            "CHVzZXJuYW1lGAEgASgJIiAKDExvZ2luUmVxdWVzdBIQCgh1c2VybmFtZRgB", 
            "IAIoDCIcCg1Mb2dpblJlc3BvbnNlEgsKA3R0bBgBIAIoByImCgZGcmllbmQS", 
            "DAoEbmFtZRgBIAIoDBIOCgZvbmxpbmUYAiABKAgiMwoSR2V0RnJpZW5kc1Jl", 
            "c3BvbnNlEh0KB2ZyaWVuZHMYASADKAsyDC5jaGF0LkZyaWVuZCI0ChJTZW5k", 
            "TWVzc2FnZVJlcXVlc3QSEAoIcmVjZWl2ZXIYASABKAwSDAoEdGV4dBgCIAIo", 
            "DCIyChJGcmllbmROb3RpZmljYXRpb24SDAoEbmFtZRgBIAIoDBIOCgZvbmxp", 
            "bmUYAiABKAgiJgoRR2V0U2NyZWVuUmVzcG9uc2USEQoJZmlsZUJ5dGVzGAEg", 
            "AigMIkYKE01lc3NhZ2VOb3RpZmljYXRpb24SDgoGc2VuZGVyGAEgAigMEgwK", 
            "BHRleHQYAiACKAwSEQoJdGltZXN0YW1wGAMgAigJIiMKE1dlbGNvbWVOb3Rp", 
            "ZmljYXRpb24SDAoEdGV4dBgBIAIoDCInChJTY3JlZW5Ob3RpZmljYXRpb24S", 
            "EQoJZmlsZUJ5dGVzGAEgAigMIocBCgdSZXF1ZXN0EiEKBWxvZ2luGAEgASgL", 
            "MhIuY2hhdC5Mb2dpblJlcXVlc3QSLgoMc2VuZF9tZXNzYWdlGAIgASgLMhgu", 
            "Y2hhdC5TZW5kTWVzc2FnZVJlcXVlc3QSKQoJZ2V0c2NyZWVuGAMgASgLMhYu", 
            "Y2hhdC5HZXRTY3JlZW5SZXF1ZXN0IskBCghSZXNwb25zZRIOCgZyZXN1bHQY", 
            "ASACKAgSFQoNbGFzdF9yZXNwb25zZRgCIAIoCBIWCg5lcnJvcl9kZXNjcmli", 
            "ZRgDIAEoDBIiCgVsb2dpbhgEIAEoCzITLmNoYXQuTG9naW5SZXNwb25zZRIt", 
            "CgtnZXRfZnJpZW5kcxgFIAEoCzIYLmNoYXQuR2V0RnJpZW5kc1Jlc3BvbnNl", 
            "EisKCnNjcmVlbmZpbGUYBiABKAsyFy5jaGF0LkdldFNjcmVlblJlc3BvbnNl", 
            "IrYBCgxOb3RpZmljYXRpb24SKAoGZnJpZW5kGAEgASgLMhguY2hhdC5Gcmll", 
            "bmROb3RpZmljYXRpb24SJgoDbXNnGAIgASgLMhkuY2hhdC5NZXNzYWdlTm90", 
            "aWZpY2F0aW9uEioKB3dlbGNvbWUYAyABKAsyGS5jaGF0LldlbGNvbWVOb3Rp", 
            "ZmljYXRpb24SKAoGc2NyZWVuGAQgASgLMhguY2hhdC5TY3JlZW5Ob3RpZmlj", 
            "YXRpb24iuAEKB01lc3NhZ2USGwoIbXNnX3R5cGUYASACKA4yCS5jaGF0Lk1T", 
            "RxIQCghzZXF1ZW5jZRgCIAIoBxISCgpzZXNzaW9uX2lkGAMgASgHEh4KB3Jl", 
            "cXVlc3QYBCABKAsyDS5jaGF0LlJlcXVlc3QSIAoIcmVzcG9uc2UYBSABKAsy", 
            "Di5jaGF0LlJlc3BvbnNlEigKDG5vdGlmaWNhdGlvbhgGIAEoCzISLmNoYXQu", 
            "Tm90aWZpY2F0aW9uKpcDCgNNU0cSEgoNTG9naW5fUmVxdWVzdBCRThITCg5M", 
            "b2dpbl9SZXNwb25zZRCSThITCg5Mb2dvdXRfUmVxdWVzdBCTThIUCg9Mb2dv", 
            "dXRfUmVzcG9uc2UQlE4SFgoRS2VlcGFsaXZlX1JlcXVlc3QQlU4SFwoSS2Vl", 
            "cGFsaXZlX1Jlc3BvbnNlEJZOEhgKE0dldF9GcmllbmRzX1JlcXVlc3QQl04S", 
            "GQoUR2V0X0ZyaWVuZHNfUmVzcG9uc2UQmE4SGQoUU2VuZF9NZXNzYWdlX1Jl", 
            "cXVlc3QQmU4SGgoVU2VuZF9NZXNzYWdlX1Jlc3BvbnNlEJpOEhkKE0ZyaWVu", 
            "ZF9Ob3RpZmljYXRpb24QoZwBEhoKFE1lc3NhZ2VfTm90aWZpY2F0aW9uEKKc", 
            "ARIaChRXZWxjb21lX05vdGlmaWNhdGlvbhCjnAESGQoTU2NyZWVuX05vdGlm", 
            "aWNhdGlvbhCknAESFwoRR2V0U2NyZWVuX1JlcXVlc3QQpZwBEhgKEkdldFNj", 
          "cmVlbl9SZXNwb25zZRCmnAE="));
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_chat_GetScreenRequest__Descriptor = Descriptor.MessageTypes[0];
        internal__static_chat_GetScreenRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::chat.GetScreenRequest, global::chat.GetScreenRequest.Builder>(internal__static_chat_GetScreenRequest__Descriptor,
                new string[] { "Username", });
        internal__static_chat_LoginRequest__Descriptor = Descriptor.MessageTypes[1];
        internal__static_chat_LoginRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::chat.LoginRequest, global::chat.LoginRequest.Builder>(internal__static_chat_LoginRequest__Descriptor,
                new string[] { "Username", });
        internal__static_chat_LoginResponse__Descriptor = Descriptor.MessageTypes[2];
        internal__static_chat_LoginResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::chat.LoginResponse, global::chat.LoginResponse.Builder>(internal__static_chat_LoginResponse__Descriptor,
                new string[] { "Ttl", });
        internal__static_chat_Friend__Descriptor = Descriptor.MessageTypes[3];
        internal__static_chat_Friend__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::chat.Friend, global::chat.Friend.Builder>(internal__static_chat_Friend__Descriptor,
                new string[] { "Name", "Online", });
        internal__static_chat_GetFriendsResponse__Descriptor = Descriptor.MessageTypes[4];
        internal__static_chat_GetFriendsResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::chat.GetFriendsResponse, global::chat.GetFriendsResponse.Builder>(internal__static_chat_GetFriendsResponse__Descriptor,
                new string[] { "Friends", });
        internal__static_chat_SendMessageRequest__Descriptor = Descriptor.MessageTypes[5];
        internal__static_chat_SendMessageRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::chat.SendMessageRequest, global::chat.SendMessageRequest.Builder>(internal__static_chat_SendMessageRequest__Descriptor,
                new string[] { "Receiver", "Text", });
        internal__static_chat_FriendNotification__Descriptor = Descriptor.MessageTypes[6];
        internal__static_chat_FriendNotification__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::chat.FriendNotification, global::chat.FriendNotification.Builder>(internal__static_chat_FriendNotification__Descriptor,
                new string[] { "Name", "Online", });
        internal__static_chat_GetScreenResponse__Descriptor = Descriptor.MessageTypes[7];
        internal__static_chat_GetScreenResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::chat.GetScreenResponse, global::chat.GetScreenResponse.Builder>(internal__static_chat_GetScreenResponse__Descriptor,
                new string[] { "FileBytes", });
        internal__static_chat_MessageNotification__Descriptor = Descriptor.MessageTypes[8];
        internal__static_chat_MessageNotification__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::chat.MessageNotification, global::chat.MessageNotification.Builder>(internal__static_chat_MessageNotification__Descriptor,
                new string[] { "Sender", "Text", "Timestamp", });
        internal__static_chat_WelcomeNotification__Descriptor = Descriptor.MessageTypes[9];
        internal__static_chat_WelcomeNotification__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::chat.WelcomeNotification, global::chat.WelcomeNotification.Builder>(internal__static_chat_WelcomeNotification__Descriptor,
                new string[] { "Text", });
        internal__static_chat_ScreenNotification__Descriptor = Descriptor.MessageTypes[10];
        internal__static_chat_ScreenNotification__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::chat.ScreenNotification, global::chat.ScreenNotification.Builder>(internal__static_chat_ScreenNotification__Descriptor,
                new string[] { "FileBytes", });
        internal__static_chat_Request__Descriptor = Descriptor.MessageTypes[11];
        internal__static_chat_Request__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::chat.Request, global::chat.Request.Builder>(internal__static_chat_Request__Descriptor,
                new string[] { "Login", "SendMessage", "Getscreen", });
        internal__static_chat_Response__Descriptor = Descriptor.MessageTypes[12];
        internal__static_chat_Response__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::chat.Response, global::chat.Response.Builder>(internal__static_chat_Response__Descriptor,
                new string[] { "Result", "LastResponse", "ErrorDescribe", "Login", "GetFriends", "Screenfile", });
        internal__static_chat_Notification__Descriptor = Descriptor.MessageTypes[13];
        internal__static_chat_Notification__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::chat.Notification, global::chat.Notification.Builder>(internal__static_chat_Notification__Descriptor,
                new string[] { "Friend", "Msg", "Welcome", "Screen", });
        internal__static_chat_Message__Descriptor = Descriptor.MessageTypes[14];
        internal__static_chat_Message__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::chat.Message, global::chat.Message.Builder>(internal__static_chat_Message__Descriptor,
                new string[] { "MsgType", "Sequence", "SessionId", "Request", "Response", "Notification", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Enums
  public enum MSG {
    Login_Request = 10001,
    Login_Response = 10002,
    Logout_Request = 10003,
    Logout_Response = 10004,
    Keepalive_Request = 10005,
    Keepalive_Response = 10006,
    Get_Friends_Request = 10007,
    Get_Friends_Response = 10008,
    Send_Message_Request = 10009,
    Send_Message_Response = 10010,
    Friend_Notification = 20001,
    Message_Notification = 20002,
    Welcome_Notification = 20003,
    Screen_Notification = 20004,
    GetScreen_Request = 20005,
    GetScreen_Response = 20006,
  }
  
  #endregion
  
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GetScreenRequest : pb::GeneratedMessage<GetScreenRequest, GetScreenRequest.Builder> {
    private GetScreenRequest() { }
    private static readonly GetScreenRequest defaultInstance = new GetScreenRequest().MakeReadOnly();
    private static readonly string[] _getScreenRequestFieldNames = new string[] { "username" };
    private static readonly uint[] _getScreenRequestFieldTags = new uint[] { 10 };
    public static GetScreenRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GetScreenRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GetScreenRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::chat.Protocol.internal__static_chat_GetScreenRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GetScreenRequest, GetScreenRequest.Builder> InternalFieldAccessors {
      get { return global::chat.Protocol.internal__static_chat_GetScreenRequest__FieldAccessorTable; }
    }
    
    public const int UsernameFieldNumber = 1;
    private bool hasUsername;
    private string username_ = "";
    public bool HasUsername {
      get { return hasUsername; }
    }
    public string Username {
      get { return username_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _getScreenRequestFieldNames;
      if (hasUsername) {
        output.WriteString(1, field_names[0], Username);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasUsername) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Username);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static GetScreenRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetScreenRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetScreenRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetScreenRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetScreenRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetScreenRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GetScreenRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GetScreenRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GetScreenRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetScreenRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GetScreenRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GetScreenRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<GetScreenRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GetScreenRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GetScreenRequest result;
      
      private GetScreenRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          GetScreenRequest original = result;
          result = new GetScreenRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GetScreenRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::chat.GetScreenRequest.Descriptor; }
      }
      
      public override GetScreenRequest DefaultInstanceForType {
        get { return global::chat.GetScreenRequest.DefaultInstance; }
      }
      
      public override GetScreenRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GetScreenRequest) {
          return MergeFrom((GetScreenRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GetScreenRequest other) {
        if (other == global::chat.GetScreenRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasUsername) {
          Username = other.Username;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_getScreenRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _getScreenRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasUsername = input.ReadString(ref result.username_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasUsername {
        get { return result.hasUsername; }
      }
      public string Username {
        get { return result.Username; }
        set { SetUsername(value); }
      }
      public Builder SetUsername(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUsername = true;
        result.username_ = value;
        return this;
      }
      public Builder ClearUsername() {
        PrepareBuilder();
        result.hasUsername = false;
        result.username_ = "";
        return this;
      }
    }
    static GetScreenRequest() {
      object.ReferenceEquals(global::chat.Protocol.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class LoginRequest : pb::GeneratedMessage<LoginRequest, LoginRequest.Builder> {
    private LoginRequest() { }
    private static readonly LoginRequest defaultInstance = new LoginRequest().MakeReadOnly();
    private static readonly string[] _loginRequestFieldNames = new string[] { "username" };
    private static readonly uint[] _loginRequestFieldTags = new uint[] { 10 };
    public static LoginRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override LoginRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override LoginRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::chat.Protocol.internal__static_chat_LoginRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<LoginRequest, LoginRequest.Builder> InternalFieldAccessors {
      get { return global::chat.Protocol.internal__static_chat_LoginRequest__FieldAccessorTable; }
    }
    
    public const int UsernameFieldNumber = 1;
    private bool hasUsername;
    private pb::ByteString username_ = pb::ByteString.Empty;
    public bool HasUsername {
      get { return hasUsername; }
    }
    public pb::ByteString Username {
      get { return username_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasUsername) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _loginRequestFieldNames;
      if (hasUsername) {
        output.WriteBytes(1, field_names[0], Username);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasUsername) {
        size += pb::CodedOutputStream.ComputeBytesSize(1, Username);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static LoginRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LoginRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LoginRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LoginRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LoginRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LoginRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static LoginRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static LoginRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static LoginRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LoginRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private LoginRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(LoginRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<LoginRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(LoginRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private LoginRequest result;
      
      private LoginRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          LoginRequest original = result;
          result = new LoginRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override LoginRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::chat.LoginRequest.Descriptor; }
      }
      
      public override LoginRequest DefaultInstanceForType {
        get { return global::chat.LoginRequest.DefaultInstance; }
      }
      
      public override LoginRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is LoginRequest) {
          return MergeFrom((LoginRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(LoginRequest other) {
        if (other == global::chat.LoginRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasUsername) {
          Username = other.Username;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_loginRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _loginRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasUsername = input.ReadBytes(ref result.username_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasUsername {
        get { return result.hasUsername; }
      }
      public pb::ByteString Username {
        get { return result.Username; }
        set { SetUsername(value); }
      }
      public Builder SetUsername(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUsername = true;
        result.username_ = value;
        return this;
      }
      public Builder ClearUsername() {
        PrepareBuilder();
        result.hasUsername = false;
        result.username_ = pb::ByteString.Empty;
        return this;
      }
    }
    static LoginRequest() {
      object.ReferenceEquals(global::chat.Protocol.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class LoginResponse : pb::GeneratedMessage<LoginResponse, LoginResponse.Builder> {
    private LoginResponse() { }
    private static readonly LoginResponse defaultInstance = new LoginResponse().MakeReadOnly();
    private static readonly string[] _loginResponseFieldNames = new string[] { "ttl" };
    private static readonly uint[] _loginResponseFieldTags = new uint[] { 13 };
    public static LoginResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override LoginResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override LoginResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::chat.Protocol.internal__static_chat_LoginResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<LoginResponse, LoginResponse.Builder> InternalFieldAccessors {
      get { return global::chat.Protocol.internal__static_chat_LoginResponse__FieldAccessorTable; }
    }
    
    public const int TtlFieldNumber = 1;
    private bool hasTtl;
    private uint ttl_;
    public bool HasTtl {
      get { return hasTtl; }
    }
    [global::System.CLSCompliant(false)]
    public uint Ttl {
      get { return ttl_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTtl) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _loginResponseFieldNames;
      if (hasTtl) {
        output.WriteFixed32(1, field_names[0], Ttl);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasTtl) {
        size += pb::CodedOutputStream.ComputeFixed32Size(1, Ttl);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static LoginResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LoginResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LoginResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LoginResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LoginResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LoginResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static LoginResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static LoginResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static LoginResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LoginResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private LoginResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(LoginResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<LoginResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(LoginResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private LoginResponse result;
      
      private LoginResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          LoginResponse original = result;
          result = new LoginResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override LoginResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::chat.LoginResponse.Descriptor; }
      }
      
      public override LoginResponse DefaultInstanceForType {
        get { return global::chat.LoginResponse.DefaultInstance; }
      }
      
      public override LoginResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is LoginResponse) {
          return MergeFrom((LoginResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(LoginResponse other) {
        if (other == global::chat.LoginResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTtl) {
          Ttl = other.Ttl;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_loginResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _loginResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 13: {
              result.hasTtl = input.ReadFixed32(ref result.ttl_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTtl {
        get { return result.hasTtl; }
      }
      [global::System.CLSCompliant(false)]
      public uint Ttl {
        get { return result.Ttl; }
        set { SetTtl(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetTtl(uint value) {
        PrepareBuilder();
        result.hasTtl = true;
        result.ttl_ = value;
        return this;
      }
      public Builder ClearTtl() {
        PrepareBuilder();
        result.hasTtl = false;
        result.ttl_ = 0;
        return this;
      }
    }
    static LoginResponse() {
      object.ReferenceEquals(global::chat.Protocol.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Friend : pb::GeneratedMessage<Friend, Friend.Builder> {
    private Friend() { }
    private static readonly Friend defaultInstance = new Friend().MakeReadOnly();
    private static readonly string[] _friendFieldNames = new string[] { "name", "online" };
    private static readonly uint[] _friendFieldTags = new uint[] { 10, 16 };
    public static Friend DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Friend DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Friend ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::chat.Protocol.internal__static_chat_Friend__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Friend, Friend.Builder> InternalFieldAccessors {
      get { return global::chat.Protocol.internal__static_chat_Friend__FieldAccessorTable; }
    }
    
    public const int NameFieldNumber = 1;
    private bool hasName;
    private pb::ByteString name_ = pb::ByteString.Empty;
    public bool HasName {
      get { return hasName; }
    }
    public pb::ByteString Name {
      get { return name_; }
    }
    
    public const int OnlineFieldNumber = 2;
    private bool hasOnline;
    private bool online_;
    public bool HasOnline {
      get { return hasOnline; }
    }
    public bool Online {
      get { return online_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasName) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _friendFieldNames;
      if (hasName) {
        output.WriteBytes(1, field_names[0], Name);
      }
      if (hasOnline) {
        output.WriteBool(2, field_names[1], Online);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasName) {
        size += pb::CodedOutputStream.ComputeBytesSize(1, Name);
      }
      if (hasOnline) {
        size += pb::CodedOutputStream.ComputeBoolSize(2, Online);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Friend ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Friend ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Friend ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Friend ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Friend ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Friend ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Friend ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Friend ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Friend ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Friend ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Friend MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Friend prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Friend, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Friend cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Friend result;
      
      private Friend PrepareBuilder() {
        if (resultIsReadOnly) {
          Friend original = result;
          result = new Friend();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Friend MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::chat.Friend.Descriptor; }
      }
      
      public override Friend DefaultInstanceForType {
        get { return global::chat.Friend.DefaultInstance; }
      }
      
      public override Friend BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Friend) {
          return MergeFrom((Friend) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Friend other) {
        if (other == global::chat.Friend.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasOnline) {
          Online = other.Online;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_friendFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _friendFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasName = input.ReadBytes(ref result.name_);
              break;
            }
            case 16: {
              result.hasOnline = input.ReadBool(ref result.online_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasName {
        get { return result.hasName; }
      }
      public pb::ByteString Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = pb::ByteString.Empty;
        return this;
      }
      
      public bool HasOnline {
        get { return result.hasOnline; }
      }
      public bool Online {
        get { return result.Online; }
        set { SetOnline(value); }
      }
      public Builder SetOnline(bool value) {
        PrepareBuilder();
        result.hasOnline = true;
        result.online_ = value;
        return this;
      }
      public Builder ClearOnline() {
        PrepareBuilder();
        result.hasOnline = false;
        result.online_ = false;
        return this;
      }
    }
    static Friend() {
      object.ReferenceEquals(global::chat.Protocol.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GetFriendsResponse : pb::GeneratedMessage<GetFriendsResponse, GetFriendsResponse.Builder> {
    private GetFriendsResponse() { }
    private static readonly GetFriendsResponse defaultInstance = new GetFriendsResponse().MakeReadOnly();
    private static readonly string[] _getFriendsResponseFieldNames = new string[] { "friends" };
    private static readonly uint[] _getFriendsResponseFieldTags = new uint[] { 10 };
    public static GetFriendsResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GetFriendsResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GetFriendsResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::chat.Protocol.internal__static_chat_GetFriendsResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GetFriendsResponse, GetFriendsResponse.Builder> InternalFieldAccessors {
      get { return global::chat.Protocol.internal__static_chat_GetFriendsResponse__FieldAccessorTable; }
    }
    
    public const int FriendsFieldNumber = 1;
    private pbc::PopsicleList<global::chat.Friend> friends_ = new pbc::PopsicleList<global::chat.Friend>();
    public scg::IList<global::chat.Friend> FriendsList {
      get { return friends_; }
    }
    public int FriendsCount {
      get { return friends_.Count; }
    }
    public global::chat.Friend GetFriends(int index) {
      return friends_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::chat.Friend element in FriendsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _getFriendsResponseFieldNames;
      if (friends_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], friends_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      foreach (global::chat.Friend element in FriendsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static GetFriendsResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetFriendsResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetFriendsResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetFriendsResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetFriendsResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetFriendsResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GetFriendsResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GetFriendsResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GetFriendsResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetFriendsResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GetFriendsResponse MakeReadOnly() {
      friends_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GetFriendsResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<GetFriendsResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GetFriendsResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GetFriendsResponse result;
      
      private GetFriendsResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          GetFriendsResponse original = result;
          result = new GetFriendsResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GetFriendsResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::chat.GetFriendsResponse.Descriptor; }
      }
      
      public override GetFriendsResponse DefaultInstanceForType {
        get { return global::chat.GetFriendsResponse.DefaultInstance; }
      }
      
      public override GetFriendsResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GetFriendsResponse) {
          return MergeFrom((GetFriendsResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GetFriendsResponse other) {
        if (other == global::chat.GetFriendsResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.friends_.Count != 0) {
          result.friends_.Add(other.friends_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_getFriendsResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _getFriendsResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.friends_, global::chat.Friend.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::chat.Friend> FriendsList {
        get { return PrepareBuilder().friends_; }
      }
      public int FriendsCount {
        get { return result.FriendsCount; }
      }
      public global::chat.Friend GetFriends(int index) {
        return result.GetFriends(index);
      }
      public Builder SetFriends(int index, global::chat.Friend value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.friends_[index] = value;
        return this;
      }
      public Builder SetFriends(int index, global::chat.Friend.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.friends_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddFriends(global::chat.Friend value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.friends_.Add(value);
        return this;
      }
      public Builder AddFriends(global::chat.Friend.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.friends_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeFriends(scg::IEnumerable<global::chat.Friend> values) {
        PrepareBuilder();
        result.friends_.Add(values);
        return this;
      }
      public Builder ClearFriends() {
        PrepareBuilder();
        result.friends_.Clear();
        return this;
      }
    }
    static GetFriendsResponse() {
      object.ReferenceEquals(global::chat.Protocol.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SendMessageRequest : pb::GeneratedMessage<SendMessageRequest, SendMessageRequest.Builder> {
    private SendMessageRequest() { }
    private static readonly SendMessageRequest defaultInstance = new SendMessageRequest().MakeReadOnly();
    private static readonly string[] _sendMessageRequestFieldNames = new string[] { "receiver", "text" };
    private static readonly uint[] _sendMessageRequestFieldTags = new uint[] { 10, 18 };
    public static SendMessageRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SendMessageRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SendMessageRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::chat.Protocol.internal__static_chat_SendMessageRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SendMessageRequest, SendMessageRequest.Builder> InternalFieldAccessors {
      get { return global::chat.Protocol.internal__static_chat_SendMessageRequest__FieldAccessorTable; }
    }
    
    public const int ReceiverFieldNumber = 1;
    private bool hasReceiver;
    private pb::ByteString receiver_ = pb::ByteString.Empty;
    public bool HasReceiver {
      get { return hasReceiver; }
    }
    public pb::ByteString Receiver {
      get { return receiver_; }
    }
    
    public const int TextFieldNumber = 2;
    private bool hasText;
    private pb::ByteString text_ = pb::ByteString.Empty;
    public bool HasText {
      get { return hasText; }
    }
    public pb::ByteString Text {
      get { return text_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasText) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _sendMessageRequestFieldNames;
      if (hasReceiver) {
        output.WriteBytes(1, field_names[0], Receiver);
      }
      if (hasText) {
        output.WriteBytes(2, field_names[1], Text);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasReceiver) {
        size += pb::CodedOutputStream.ComputeBytesSize(1, Receiver);
      }
      if (hasText) {
        size += pb::CodedOutputStream.ComputeBytesSize(2, Text);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static SendMessageRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SendMessageRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SendMessageRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SendMessageRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SendMessageRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SendMessageRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SendMessageRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SendMessageRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SendMessageRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SendMessageRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SendMessageRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SendMessageRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<SendMessageRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SendMessageRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SendMessageRequest result;
      
      private SendMessageRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          SendMessageRequest original = result;
          result = new SendMessageRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SendMessageRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::chat.SendMessageRequest.Descriptor; }
      }
      
      public override SendMessageRequest DefaultInstanceForType {
        get { return global::chat.SendMessageRequest.DefaultInstance; }
      }
      
      public override SendMessageRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SendMessageRequest) {
          return MergeFrom((SendMessageRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SendMessageRequest other) {
        if (other == global::chat.SendMessageRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasReceiver) {
          Receiver = other.Receiver;
        }
        if (other.HasText) {
          Text = other.Text;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_sendMessageRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _sendMessageRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasReceiver = input.ReadBytes(ref result.receiver_);
              break;
            }
            case 18: {
              result.hasText = input.ReadBytes(ref result.text_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasReceiver {
        get { return result.hasReceiver; }
      }
      public pb::ByteString Receiver {
        get { return result.Receiver; }
        set { SetReceiver(value); }
      }
      public Builder SetReceiver(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasReceiver = true;
        result.receiver_ = value;
        return this;
      }
      public Builder ClearReceiver() {
        PrepareBuilder();
        result.hasReceiver = false;
        result.receiver_ = pb::ByteString.Empty;
        return this;
      }
      
      public bool HasText {
        get { return result.hasText; }
      }
      public pb::ByteString Text {
        get { return result.Text; }
        set { SetText(value); }
      }
      public Builder SetText(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasText = true;
        result.text_ = value;
        return this;
      }
      public Builder ClearText() {
        PrepareBuilder();
        result.hasText = false;
        result.text_ = pb::ByteString.Empty;
        return this;
      }
    }
    static SendMessageRequest() {
      object.ReferenceEquals(global::chat.Protocol.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class FriendNotification : pb::GeneratedMessage<FriendNotification, FriendNotification.Builder> {
    private FriendNotification() { }
    private static readonly FriendNotification defaultInstance = new FriendNotification().MakeReadOnly();
    private static readonly string[] _friendNotificationFieldNames = new string[] { "name", "online" };
    private static readonly uint[] _friendNotificationFieldTags = new uint[] { 10, 16 };
    public static FriendNotification DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override FriendNotification DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override FriendNotification ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::chat.Protocol.internal__static_chat_FriendNotification__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<FriendNotification, FriendNotification.Builder> InternalFieldAccessors {
      get { return global::chat.Protocol.internal__static_chat_FriendNotification__FieldAccessorTable; }
    }
    
    public const int NameFieldNumber = 1;
    private bool hasName;
    private pb::ByteString name_ = pb::ByteString.Empty;
    public bool HasName {
      get { return hasName; }
    }
    public pb::ByteString Name {
      get { return name_; }
    }
    
    public const int OnlineFieldNumber = 2;
    private bool hasOnline;
    private bool online_;
    public bool HasOnline {
      get { return hasOnline; }
    }
    public bool Online {
      get { return online_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasName) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _friendNotificationFieldNames;
      if (hasName) {
        output.WriteBytes(1, field_names[0], Name);
      }
      if (hasOnline) {
        output.WriteBool(2, field_names[1], Online);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasName) {
        size += pb::CodedOutputStream.ComputeBytesSize(1, Name);
      }
      if (hasOnline) {
        size += pb::CodedOutputStream.ComputeBoolSize(2, Online);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static FriendNotification ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FriendNotification ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FriendNotification ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FriendNotification ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FriendNotification ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FriendNotification ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static FriendNotification ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static FriendNotification ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static FriendNotification ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FriendNotification ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private FriendNotification MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(FriendNotification prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<FriendNotification, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(FriendNotification cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private FriendNotification result;
      
      private FriendNotification PrepareBuilder() {
        if (resultIsReadOnly) {
          FriendNotification original = result;
          result = new FriendNotification();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override FriendNotification MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::chat.FriendNotification.Descriptor; }
      }
      
      public override FriendNotification DefaultInstanceForType {
        get { return global::chat.FriendNotification.DefaultInstance; }
      }
      
      public override FriendNotification BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is FriendNotification) {
          return MergeFrom((FriendNotification) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(FriendNotification other) {
        if (other == global::chat.FriendNotification.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasOnline) {
          Online = other.Online;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_friendNotificationFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _friendNotificationFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasName = input.ReadBytes(ref result.name_);
              break;
            }
            case 16: {
              result.hasOnline = input.ReadBool(ref result.online_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasName {
        get { return result.hasName; }
      }
      public pb::ByteString Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = pb::ByteString.Empty;
        return this;
      }
      
      public bool HasOnline {
        get { return result.hasOnline; }
      }
      public bool Online {
        get { return result.Online; }
        set { SetOnline(value); }
      }
      public Builder SetOnline(bool value) {
        PrepareBuilder();
        result.hasOnline = true;
        result.online_ = value;
        return this;
      }
      public Builder ClearOnline() {
        PrepareBuilder();
        result.hasOnline = false;
        result.online_ = false;
        return this;
      }
    }
    static FriendNotification() {
      object.ReferenceEquals(global::chat.Protocol.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GetScreenResponse : pb::GeneratedMessage<GetScreenResponse, GetScreenResponse.Builder> {
    private GetScreenResponse() { }
    private static readonly GetScreenResponse defaultInstance = new GetScreenResponse().MakeReadOnly();
    private static readonly string[] _getScreenResponseFieldNames = new string[] { "fileBytes" };
    private static readonly uint[] _getScreenResponseFieldTags = new uint[] { 10 };
    public static GetScreenResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GetScreenResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GetScreenResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::chat.Protocol.internal__static_chat_GetScreenResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GetScreenResponse, GetScreenResponse.Builder> InternalFieldAccessors {
      get { return global::chat.Protocol.internal__static_chat_GetScreenResponse__FieldAccessorTable; }
    }
    
    public const int FileBytesFieldNumber = 1;
    private bool hasFileBytes;
    private pb::ByteString fileBytes_ = pb::ByteString.Empty;
    public bool HasFileBytes {
      get { return hasFileBytes; }
    }
    public pb::ByteString FileBytes {
      get { return fileBytes_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasFileBytes) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _getScreenResponseFieldNames;
      if (hasFileBytes) {
        output.WriteBytes(1, field_names[0], FileBytes);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasFileBytes) {
        size += pb::CodedOutputStream.ComputeBytesSize(1, FileBytes);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static GetScreenResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetScreenResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetScreenResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetScreenResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetScreenResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetScreenResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GetScreenResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GetScreenResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GetScreenResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetScreenResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GetScreenResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GetScreenResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<GetScreenResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GetScreenResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GetScreenResponse result;
      
      private GetScreenResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          GetScreenResponse original = result;
          result = new GetScreenResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GetScreenResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::chat.GetScreenResponse.Descriptor; }
      }
      
      public override GetScreenResponse DefaultInstanceForType {
        get { return global::chat.GetScreenResponse.DefaultInstance; }
      }
      
      public override GetScreenResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GetScreenResponse) {
          return MergeFrom((GetScreenResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GetScreenResponse other) {
        if (other == global::chat.GetScreenResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasFileBytes) {
          FileBytes = other.FileBytes;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_getScreenResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _getScreenResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasFileBytes = input.ReadBytes(ref result.fileBytes_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasFileBytes {
        get { return result.hasFileBytes; }
      }
      public pb::ByteString FileBytes {
        get { return result.FileBytes; }
        set { SetFileBytes(value); }
      }
      public Builder SetFileBytes(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFileBytes = true;
        result.fileBytes_ = value;
        return this;
      }
      public Builder ClearFileBytes() {
        PrepareBuilder();
        result.hasFileBytes = false;
        result.fileBytes_ = pb::ByteString.Empty;
        return this;
      }
    }
    static GetScreenResponse() {
      object.ReferenceEquals(global::chat.Protocol.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class MessageNotification : pb::GeneratedMessage<MessageNotification, MessageNotification.Builder> {
    private MessageNotification() { }
    private static readonly MessageNotification defaultInstance = new MessageNotification().MakeReadOnly();
    private static readonly string[] _messageNotificationFieldNames = new string[] { "sender", "text", "timestamp" };
    private static readonly uint[] _messageNotificationFieldTags = new uint[] { 10, 18, 26 };
    public static MessageNotification DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override MessageNotification DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override MessageNotification ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::chat.Protocol.internal__static_chat_MessageNotification__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<MessageNotification, MessageNotification.Builder> InternalFieldAccessors {
      get { return global::chat.Protocol.internal__static_chat_MessageNotification__FieldAccessorTable; }
    }
    
    public const int SenderFieldNumber = 1;
    private bool hasSender;
    private pb::ByteString sender_ = pb::ByteString.Empty;
    public bool HasSender {
      get { return hasSender; }
    }
    public pb::ByteString Sender {
      get { return sender_; }
    }
    
    public const int TextFieldNumber = 2;
    private bool hasText;
    private pb::ByteString text_ = pb::ByteString.Empty;
    public bool HasText {
      get { return hasText; }
    }
    public pb::ByteString Text {
      get { return text_; }
    }
    
    public const int TimestampFieldNumber = 3;
    private bool hasTimestamp;
    private string timestamp_ = "";
    public bool HasTimestamp {
      get { return hasTimestamp; }
    }
    public string Timestamp {
      get { return timestamp_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSender) return false;
        if (!hasText) return false;
        if (!hasTimestamp) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _messageNotificationFieldNames;
      if (hasSender) {
        output.WriteBytes(1, field_names[0], Sender);
      }
      if (hasText) {
        output.WriteBytes(2, field_names[1], Text);
      }
      if (hasTimestamp) {
        output.WriteString(3, field_names[2], Timestamp);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasSender) {
        size += pb::CodedOutputStream.ComputeBytesSize(1, Sender);
      }
      if (hasText) {
        size += pb::CodedOutputStream.ComputeBytesSize(2, Text);
      }
      if (hasTimestamp) {
        size += pb::CodedOutputStream.ComputeStringSize(3, Timestamp);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static MessageNotification ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MessageNotification ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MessageNotification ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MessageNotification ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MessageNotification ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MessageNotification ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static MessageNotification ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static MessageNotification ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static MessageNotification ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MessageNotification ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private MessageNotification MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(MessageNotification prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<MessageNotification, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(MessageNotification cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private MessageNotification result;
      
      private MessageNotification PrepareBuilder() {
        if (resultIsReadOnly) {
          MessageNotification original = result;
          result = new MessageNotification();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override MessageNotification MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::chat.MessageNotification.Descriptor; }
      }
      
      public override MessageNotification DefaultInstanceForType {
        get { return global::chat.MessageNotification.DefaultInstance; }
      }
      
      public override MessageNotification BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is MessageNotification) {
          return MergeFrom((MessageNotification) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(MessageNotification other) {
        if (other == global::chat.MessageNotification.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSender) {
          Sender = other.Sender;
        }
        if (other.HasText) {
          Text = other.Text;
        }
        if (other.HasTimestamp) {
          Timestamp = other.Timestamp;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_messageNotificationFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _messageNotificationFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasSender = input.ReadBytes(ref result.sender_);
              break;
            }
            case 18: {
              result.hasText = input.ReadBytes(ref result.text_);
              break;
            }
            case 26: {
              result.hasTimestamp = input.ReadString(ref result.timestamp_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSender {
        get { return result.hasSender; }
      }
      public pb::ByteString Sender {
        get { return result.Sender; }
        set { SetSender(value); }
      }
      public Builder SetSender(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSender = true;
        result.sender_ = value;
        return this;
      }
      public Builder ClearSender() {
        PrepareBuilder();
        result.hasSender = false;
        result.sender_ = pb::ByteString.Empty;
        return this;
      }
      
      public bool HasText {
        get { return result.hasText; }
      }
      public pb::ByteString Text {
        get { return result.Text; }
        set { SetText(value); }
      }
      public Builder SetText(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasText = true;
        result.text_ = value;
        return this;
      }
      public Builder ClearText() {
        PrepareBuilder();
        result.hasText = false;
        result.text_ = pb::ByteString.Empty;
        return this;
      }
      
      public bool HasTimestamp {
        get { return result.hasTimestamp; }
      }
      public string Timestamp {
        get { return result.Timestamp; }
        set { SetTimestamp(value); }
      }
      public Builder SetTimestamp(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTimestamp = true;
        result.timestamp_ = value;
        return this;
      }
      public Builder ClearTimestamp() {
        PrepareBuilder();
        result.hasTimestamp = false;
        result.timestamp_ = "";
        return this;
      }
    }
    static MessageNotification() {
      object.ReferenceEquals(global::chat.Protocol.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class WelcomeNotification : pb::GeneratedMessage<WelcomeNotification, WelcomeNotification.Builder> {
    private WelcomeNotification() { }
    private static readonly WelcomeNotification defaultInstance = new WelcomeNotification().MakeReadOnly();
    private static readonly string[] _welcomeNotificationFieldNames = new string[] { "text" };
    private static readonly uint[] _welcomeNotificationFieldTags = new uint[] { 10 };
    public static WelcomeNotification DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override WelcomeNotification DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override WelcomeNotification ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::chat.Protocol.internal__static_chat_WelcomeNotification__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<WelcomeNotification, WelcomeNotification.Builder> InternalFieldAccessors {
      get { return global::chat.Protocol.internal__static_chat_WelcomeNotification__FieldAccessorTable; }
    }
    
    public const int TextFieldNumber = 1;
    private bool hasText;
    private pb::ByteString text_ = pb::ByteString.Empty;
    public bool HasText {
      get { return hasText; }
    }
    public pb::ByteString Text {
      get { return text_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasText) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _welcomeNotificationFieldNames;
      if (hasText) {
        output.WriteBytes(1, field_names[0], Text);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasText) {
        size += pb::CodedOutputStream.ComputeBytesSize(1, Text);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static WelcomeNotification ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static WelcomeNotification ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static WelcomeNotification ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static WelcomeNotification ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static WelcomeNotification ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static WelcomeNotification ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static WelcomeNotification ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static WelcomeNotification ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static WelcomeNotification ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static WelcomeNotification ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private WelcomeNotification MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(WelcomeNotification prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<WelcomeNotification, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(WelcomeNotification cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private WelcomeNotification result;
      
      private WelcomeNotification PrepareBuilder() {
        if (resultIsReadOnly) {
          WelcomeNotification original = result;
          result = new WelcomeNotification();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override WelcomeNotification MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::chat.WelcomeNotification.Descriptor; }
      }
      
      public override WelcomeNotification DefaultInstanceForType {
        get { return global::chat.WelcomeNotification.DefaultInstance; }
      }
      
      public override WelcomeNotification BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is WelcomeNotification) {
          return MergeFrom((WelcomeNotification) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(WelcomeNotification other) {
        if (other == global::chat.WelcomeNotification.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasText) {
          Text = other.Text;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_welcomeNotificationFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _welcomeNotificationFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasText = input.ReadBytes(ref result.text_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasText {
        get { return result.hasText; }
      }
      public pb::ByteString Text {
        get { return result.Text; }
        set { SetText(value); }
      }
      public Builder SetText(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasText = true;
        result.text_ = value;
        return this;
      }
      public Builder ClearText() {
        PrepareBuilder();
        result.hasText = false;
        result.text_ = pb::ByteString.Empty;
        return this;
      }
    }
    static WelcomeNotification() {
      object.ReferenceEquals(global::chat.Protocol.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ScreenNotification : pb::GeneratedMessage<ScreenNotification, ScreenNotification.Builder> {
    private ScreenNotification() { }
    private static readonly ScreenNotification defaultInstance = new ScreenNotification().MakeReadOnly();
    private static readonly string[] _screenNotificationFieldNames = new string[] { "fileBytes" };
    private static readonly uint[] _screenNotificationFieldTags = new uint[] { 10 };
    public static ScreenNotification DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ScreenNotification DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ScreenNotification ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::chat.Protocol.internal__static_chat_ScreenNotification__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ScreenNotification, ScreenNotification.Builder> InternalFieldAccessors {
      get { return global::chat.Protocol.internal__static_chat_ScreenNotification__FieldAccessorTable; }
    }
    
    public const int FileBytesFieldNumber = 1;
    private bool hasFileBytes;
    private pb::ByteString fileBytes_ = pb::ByteString.Empty;
    public bool HasFileBytes {
      get { return hasFileBytes; }
    }
    public pb::ByteString FileBytes {
      get { return fileBytes_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasFileBytes) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _screenNotificationFieldNames;
      if (hasFileBytes) {
        output.WriteBytes(1, field_names[0], FileBytes);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasFileBytes) {
        size += pb::CodedOutputStream.ComputeBytesSize(1, FileBytes);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static ScreenNotification ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ScreenNotification ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ScreenNotification ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ScreenNotification ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ScreenNotification ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ScreenNotification ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ScreenNotification ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ScreenNotification ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ScreenNotification ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ScreenNotification ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ScreenNotification MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ScreenNotification prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ScreenNotification, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ScreenNotification cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ScreenNotification result;
      
      private ScreenNotification PrepareBuilder() {
        if (resultIsReadOnly) {
          ScreenNotification original = result;
          result = new ScreenNotification();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ScreenNotification MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::chat.ScreenNotification.Descriptor; }
      }
      
      public override ScreenNotification DefaultInstanceForType {
        get { return global::chat.ScreenNotification.DefaultInstance; }
      }
      
      public override ScreenNotification BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ScreenNotification) {
          return MergeFrom((ScreenNotification) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ScreenNotification other) {
        if (other == global::chat.ScreenNotification.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasFileBytes) {
          FileBytes = other.FileBytes;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_screenNotificationFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _screenNotificationFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasFileBytes = input.ReadBytes(ref result.fileBytes_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasFileBytes {
        get { return result.hasFileBytes; }
      }
      public pb::ByteString FileBytes {
        get { return result.FileBytes; }
        set { SetFileBytes(value); }
      }
      public Builder SetFileBytes(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFileBytes = true;
        result.fileBytes_ = value;
        return this;
      }
      public Builder ClearFileBytes() {
        PrepareBuilder();
        result.hasFileBytes = false;
        result.fileBytes_ = pb::ByteString.Empty;
        return this;
      }
    }
    static ScreenNotification() {
      object.ReferenceEquals(global::chat.Protocol.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Request : pb::GeneratedMessage<Request, Request.Builder> {
    private Request() { }
    private static readonly Request defaultInstance = new Request().MakeReadOnly();
    private static readonly string[] _requestFieldNames = new string[] { "getscreen", "login", "send_message" };
    private static readonly uint[] _requestFieldTags = new uint[] { 26, 10, 18 };
    public static Request DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Request DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Request ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::chat.Protocol.internal__static_chat_Request__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Request, Request.Builder> InternalFieldAccessors {
      get { return global::chat.Protocol.internal__static_chat_Request__FieldAccessorTable; }
    }
    
    public const int LoginFieldNumber = 1;
    private bool hasLogin;
    private global::chat.LoginRequest login_;
    public bool HasLogin {
      get { return hasLogin; }
    }
    public global::chat.LoginRequest Login {
      get { return login_ ?? global::chat.LoginRequest.DefaultInstance; }
    }
    
    public const int SendMessageFieldNumber = 2;
    private bool hasSendMessage;
    private global::chat.SendMessageRequest sendMessage_;
    public bool HasSendMessage {
      get { return hasSendMessage; }
    }
    public global::chat.SendMessageRequest SendMessage {
      get { return sendMessage_ ?? global::chat.SendMessageRequest.DefaultInstance; }
    }
    
    public const int GetscreenFieldNumber = 3;
    private bool hasGetscreen;
    private global::chat.GetScreenRequest getscreen_;
    public bool HasGetscreen {
      get { return hasGetscreen; }
    }
    public global::chat.GetScreenRequest Getscreen {
      get { return getscreen_ ?? global::chat.GetScreenRequest.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasLogin) {
          if (!Login.IsInitialized) return false;
        }
        if (HasSendMessage) {
          if (!SendMessage.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _requestFieldNames;
      if (hasLogin) {
        output.WriteMessage(1, field_names[1], Login);
      }
      if (hasSendMessage) {
        output.WriteMessage(2, field_names[2], SendMessage);
      }
      if (hasGetscreen) {
        output.WriteMessage(3, field_names[0], Getscreen);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasLogin) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Login);
      }
      if (hasSendMessage) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, SendMessage);
      }
      if (hasGetscreen) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, Getscreen);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Request ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Request ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Request ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Request ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Request ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Request ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Request ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Request ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Request ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Request ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Request MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Request prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Request, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Request cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Request result;
      
      private Request PrepareBuilder() {
        if (resultIsReadOnly) {
          Request original = result;
          result = new Request();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Request MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::chat.Request.Descriptor; }
      }
      
      public override Request DefaultInstanceForType {
        get { return global::chat.Request.DefaultInstance; }
      }
      
      public override Request BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Request) {
          return MergeFrom((Request) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Request other) {
        if (other == global::chat.Request.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasLogin) {
          MergeLogin(other.Login);
        }
        if (other.HasSendMessage) {
          MergeSendMessage(other.SendMessage);
        }
        if (other.HasGetscreen) {
          MergeGetscreen(other.Getscreen);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_requestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _requestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::chat.LoginRequest.Builder subBuilder = global::chat.LoginRequest.CreateBuilder();
              if (result.hasLogin) {
                subBuilder.MergeFrom(Login);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Login = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::chat.SendMessageRequest.Builder subBuilder = global::chat.SendMessageRequest.CreateBuilder();
              if (result.hasSendMessage) {
                subBuilder.MergeFrom(SendMessage);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SendMessage = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::chat.GetScreenRequest.Builder subBuilder = global::chat.GetScreenRequest.CreateBuilder();
              if (result.hasGetscreen) {
                subBuilder.MergeFrom(Getscreen);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Getscreen = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasLogin {
       get { return result.hasLogin; }
      }
      public global::chat.LoginRequest Login {
        get { return result.Login; }
        set { SetLogin(value); }
      }
      public Builder SetLogin(global::chat.LoginRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLogin = true;
        result.login_ = value;
        return this;
      }
      public Builder SetLogin(global::chat.LoginRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasLogin = true;
        result.login_ = builderForValue.Build();
        return this;
      }
      public Builder MergeLogin(global::chat.LoginRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasLogin &&
            result.login_ != global::chat.LoginRequest.DefaultInstance) {
            result.login_ = global::chat.LoginRequest.CreateBuilder(result.login_).MergeFrom(value).BuildPartial();
        } else {
          result.login_ = value;
        }
        result.hasLogin = true;
        return this;
      }
      public Builder ClearLogin() {
        PrepareBuilder();
        result.hasLogin = false;
        result.login_ = null;
        return this;
      }
      
      public bool HasSendMessage {
       get { return result.hasSendMessage; }
      }
      public global::chat.SendMessageRequest SendMessage {
        get { return result.SendMessage; }
        set { SetSendMessage(value); }
      }
      public Builder SetSendMessage(global::chat.SendMessageRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSendMessage = true;
        result.sendMessage_ = value;
        return this;
      }
      public Builder SetSendMessage(global::chat.SendMessageRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSendMessage = true;
        result.sendMessage_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSendMessage(global::chat.SendMessageRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSendMessage &&
            result.sendMessage_ != global::chat.SendMessageRequest.DefaultInstance) {
            result.sendMessage_ = global::chat.SendMessageRequest.CreateBuilder(result.sendMessage_).MergeFrom(value).BuildPartial();
        } else {
          result.sendMessage_ = value;
        }
        result.hasSendMessage = true;
        return this;
      }
      public Builder ClearSendMessage() {
        PrepareBuilder();
        result.hasSendMessage = false;
        result.sendMessage_ = null;
        return this;
      }
      
      public bool HasGetscreen {
       get { return result.hasGetscreen; }
      }
      public global::chat.GetScreenRequest Getscreen {
        get { return result.Getscreen; }
        set { SetGetscreen(value); }
      }
      public Builder SetGetscreen(global::chat.GetScreenRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGetscreen = true;
        result.getscreen_ = value;
        return this;
      }
      public Builder SetGetscreen(global::chat.GetScreenRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasGetscreen = true;
        result.getscreen_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGetscreen(global::chat.GetScreenRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasGetscreen &&
            result.getscreen_ != global::chat.GetScreenRequest.DefaultInstance) {
            result.getscreen_ = global::chat.GetScreenRequest.CreateBuilder(result.getscreen_).MergeFrom(value).BuildPartial();
        } else {
          result.getscreen_ = value;
        }
        result.hasGetscreen = true;
        return this;
      }
      public Builder ClearGetscreen() {
        PrepareBuilder();
        result.hasGetscreen = false;
        result.getscreen_ = null;
        return this;
      }
    }
    static Request() {
      object.ReferenceEquals(global::chat.Protocol.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Response : pb::GeneratedMessage<Response, Response.Builder> {
    private Response() { }
    private static readonly Response defaultInstance = new Response().MakeReadOnly();
    private static readonly string[] _responseFieldNames = new string[] { "error_describe", "get_friends", "last_response", "login", "result", "screenfile" };
    private static readonly uint[] _responseFieldTags = new uint[] { 26, 42, 16, 34, 8, 50 };
    public static Response DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Response DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Response ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::chat.Protocol.internal__static_chat_Response__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Response, Response.Builder> InternalFieldAccessors {
      get { return global::chat.Protocol.internal__static_chat_Response__FieldAccessorTable; }
    }
    
    public const int ResultFieldNumber = 1;
    private bool hasResult;
    private bool result_;
    public bool HasResult {
      get { return hasResult; }
    }
    public bool Result {
      get { return result_; }
    }
    
    public const int LastResponseFieldNumber = 2;
    private bool hasLastResponse;
    private bool lastResponse_;
    public bool HasLastResponse {
      get { return hasLastResponse; }
    }
    public bool LastResponse {
      get { return lastResponse_; }
    }
    
    public const int ErrorDescribeFieldNumber = 3;
    private bool hasErrorDescribe;
    private pb::ByteString errorDescribe_ = pb::ByteString.Empty;
    public bool HasErrorDescribe {
      get { return hasErrorDescribe; }
    }
    public pb::ByteString ErrorDescribe {
      get { return errorDescribe_; }
    }
    
    public const int LoginFieldNumber = 4;
    private bool hasLogin;
    private global::chat.LoginResponse login_;
    public bool HasLogin {
      get { return hasLogin; }
    }
    public global::chat.LoginResponse Login {
      get { return login_ ?? global::chat.LoginResponse.DefaultInstance; }
    }
    
    public const int GetFriendsFieldNumber = 5;
    private bool hasGetFriends;
    private global::chat.GetFriendsResponse getFriends_;
    public bool HasGetFriends {
      get { return hasGetFriends; }
    }
    public global::chat.GetFriendsResponse GetFriends {
      get { return getFriends_ ?? global::chat.GetFriendsResponse.DefaultInstance; }
    }
    
    public const int ScreenfileFieldNumber = 6;
    private bool hasScreenfile;
    private global::chat.GetScreenResponse screenfile_;
    public bool HasScreenfile {
      get { return hasScreenfile; }
    }
    public global::chat.GetScreenResponse Screenfile {
      get { return screenfile_ ?? global::chat.GetScreenResponse.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasResult) return false;
        if (!hasLastResponse) return false;
        if (HasLogin) {
          if (!Login.IsInitialized) return false;
        }
        if (HasGetFriends) {
          if (!GetFriends.IsInitialized) return false;
        }
        if (HasScreenfile) {
          if (!Screenfile.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _responseFieldNames;
      if (hasResult) {
        output.WriteBool(1, field_names[4], Result);
      }
      if (hasLastResponse) {
        output.WriteBool(2, field_names[2], LastResponse);
      }
      if (hasErrorDescribe) {
        output.WriteBytes(3, field_names[0], ErrorDescribe);
      }
      if (hasLogin) {
        output.WriteMessage(4, field_names[3], Login);
      }
      if (hasGetFriends) {
        output.WriteMessage(5, field_names[1], GetFriends);
      }
      if (hasScreenfile) {
        output.WriteMessage(6, field_names[5], Screenfile);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasResult) {
        size += pb::CodedOutputStream.ComputeBoolSize(1, Result);
      }
      if (hasLastResponse) {
        size += pb::CodedOutputStream.ComputeBoolSize(2, LastResponse);
      }
      if (hasErrorDescribe) {
        size += pb::CodedOutputStream.ComputeBytesSize(3, ErrorDescribe);
      }
      if (hasLogin) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, Login);
      }
      if (hasGetFriends) {
        size += pb::CodedOutputStream.ComputeMessageSize(5, GetFriends);
      }
      if (hasScreenfile) {
        size += pb::CodedOutputStream.ComputeMessageSize(6, Screenfile);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Response ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Response ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Response ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Response ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Response ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Response ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Response ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Response ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Response ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Response ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Response MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Response prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Response, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Response cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Response result;
      
      private Response PrepareBuilder() {
        if (resultIsReadOnly) {
          Response original = result;
          result = new Response();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Response MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::chat.Response.Descriptor; }
      }
      
      public override Response DefaultInstanceForType {
        get { return global::chat.Response.DefaultInstance; }
      }
      
      public override Response BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Response) {
          return MergeFrom((Response) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Response other) {
        if (other == global::chat.Response.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResult) {
          Result = other.Result;
        }
        if (other.HasLastResponse) {
          LastResponse = other.LastResponse;
        }
        if (other.HasErrorDescribe) {
          ErrorDescribe = other.ErrorDescribe;
        }
        if (other.HasLogin) {
          MergeLogin(other.Login);
        }
        if (other.HasGetFriends) {
          MergeGetFriends(other.GetFriends);
        }
        if (other.HasScreenfile) {
          MergeScreenfile(other.Screenfile);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_responseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _responseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasResult = input.ReadBool(ref result.result_);
              break;
            }
            case 16: {
              result.hasLastResponse = input.ReadBool(ref result.lastResponse_);
              break;
            }
            case 26: {
              result.hasErrorDescribe = input.ReadBytes(ref result.errorDescribe_);
              break;
            }
            case 34: {
              global::chat.LoginResponse.Builder subBuilder = global::chat.LoginResponse.CreateBuilder();
              if (result.hasLogin) {
                subBuilder.MergeFrom(Login);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Login = subBuilder.BuildPartial();
              break;
            }
            case 42: {
              global::chat.GetFriendsResponse.Builder subBuilder = global::chat.GetFriendsResponse.CreateBuilder();
              if (result.hasGetFriends) {
                subBuilder.MergeFrom(GetFriends);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              GetFriends = subBuilder.BuildPartial();
              break;
            }
            case 50: {
              global::chat.GetScreenResponse.Builder subBuilder = global::chat.GetScreenResponse.CreateBuilder();
              if (result.hasScreenfile) {
                subBuilder.MergeFrom(Screenfile);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Screenfile = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasResult {
        get { return result.hasResult; }
      }
      public bool Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(bool value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = false;
        return this;
      }
      
      public bool HasLastResponse {
        get { return result.hasLastResponse; }
      }
      public bool LastResponse {
        get { return result.LastResponse; }
        set { SetLastResponse(value); }
      }
      public Builder SetLastResponse(bool value) {
        PrepareBuilder();
        result.hasLastResponse = true;
        result.lastResponse_ = value;
        return this;
      }
      public Builder ClearLastResponse() {
        PrepareBuilder();
        result.hasLastResponse = false;
        result.lastResponse_ = false;
        return this;
      }
      
      public bool HasErrorDescribe {
        get { return result.hasErrorDescribe; }
      }
      public pb::ByteString ErrorDescribe {
        get { return result.ErrorDescribe; }
        set { SetErrorDescribe(value); }
      }
      public Builder SetErrorDescribe(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasErrorDescribe = true;
        result.errorDescribe_ = value;
        return this;
      }
      public Builder ClearErrorDescribe() {
        PrepareBuilder();
        result.hasErrorDescribe = false;
        result.errorDescribe_ = pb::ByteString.Empty;
        return this;
      }
      
      public bool HasLogin {
       get { return result.hasLogin; }
      }
      public global::chat.LoginResponse Login {
        get { return result.Login; }
        set { SetLogin(value); }
      }
      public Builder SetLogin(global::chat.LoginResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLogin = true;
        result.login_ = value;
        return this;
      }
      public Builder SetLogin(global::chat.LoginResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasLogin = true;
        result.login_ = builderForValue.Build();
        return this;
      }
      public Builder MergeLogin(global::chat.LoginResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasLogin &&
            result.login_ != global::chat.LoginResponse.DefaultInstance) {
            result.login_ = global::chat.LoginResponse.CreateBuilder(result.login_).MergeFrom(value).BuildPartial();
        } else {
          result.login_ = value;
        }
        result.hasLogin = true;
        return this;
      }
      public Builder ClearLogin() {
        PrepareBuilder();
        result.hasLogin = false;
        result.login_ = null;
        return this;
      }
      
      public bool HasGetFriends {
       get { return result.hasGetFriends; }
      }
      public global::chat.GetFriendsResponse GetFriends {
        get { return result.GetFriends; }
        set { SetGetFriends(value); }
      }
      public Builder SetGetFriends(global::chat.GetFriendsResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGetFriends = true;
        result.getFriends_ = value;
        return this;
      }
      public Builder SetGetFriends(global::chat.GetFriendsResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasGetFriends = true;
        result.getFriends_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGetFriends(global::chat.GetFriendsResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasGetFriends &&
            result.getFriends_ != global::chat.GetFriendsResponse.DefaultInstance) {
            result.getFriends_ = global::chat.GetFriendsResponse.CreateBuilder(result.getFriends_).MergeFrom(value).BuildPartial();
        } else {
          result.getFriends_ = value;
        }
        result.hasGetFriends = true;
        return this;
      }
      public Builder ClearGetFriends() {
        PrepareBuilder();
        result.hasGetFriends = false;
        result.getFriends_ = null;
        return this;
      }
      
      public bool HasScreenfile {
       get { return result.hasScreenfile; }
      }
      public global::chat.GetScreenResponse Screenfile {
        get { return result.Screenfile; }
        set { SetScreenfile(value); }
      }
      public Builder SetScreenfile(global::chat.GetScreenResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasScreenfile = true;
        result.screenfile_ = value;
        return this;
      }
      public Builder SetScreenfile(global::chat.GetScreenResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasScreenfile = true;
        result.screenfile_ = builderForValue.Build();
        return this;
      }
      public Builder MergeScreenfile(global::chat.GetScreenResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasScreenfile &&
            result.screenfile_ != global::chat.GetScreenResponse.DefaultInstance) {
            result.screenfile_ = global::chat.GetScreenResponse.CreateBuilder(result.screenfile_).MergeFrom(value).BuildPartial();
        } else {
          result.screenfile_ = value;
        }
        result.hasScreenfile = true;
        return this;
      }
      public Builder ClearScreenfile() {
        PrepareBuilder();
        result.hasScreenfile = false;
        result.screenfile_ = null;
        return this;
      }
    }
    static Response() {
      object.ReferenceEquals(global::chat.Protocol.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Notification : pb::GeneratedMessage<Notification, Notification.Builder> {
    private Notification() { }
    private static readonly Notification defaultInstance = new Notification().MakeReadOnly();
    private static readonly string[] _notificationFieldNames = new string[] { "friend", "msg", "screen", "welcome" };
    private static readonly uint[] _notificationFieldTags = new uint[] { 10, 18, 34, 26 };
    public static Notification DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Notification DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Notification ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::chat.Protocol.internal__static_chat_Notification__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Notification, Notification.Builder> InternalFieldAccessors {
      get { return global::chat.Protocol.internal__static_chat_Notification__FieldAccessorTable; }
    }
    
    public const int FriendFieldNumber = 1;
    private bool hasFriend;
    private global::chat.FriendNotification friend_;
    public bool HasFriend {
      get { return hasFriend; }
    }
    public global::chat.FriendNotification Friend {
      get { return friend_ ?? global::chat.FriendNotification.DefaultInstance; }
    }
    
    public const int MsgFieldNumber = 2;
    private bool hasMsg;
    private global::chat.MessageNotification msg_;
    public bool HasMsg {
      get { return hasMsg; }
    }
    public global::chat.MessageNotification Msg {
      get { return msg_ ?? global::chat.MessageNotification.DefaultInstance; }
    }
    
    public const int WelcomeFieldNumber = 3;
    private bool hasWelcome;
    private global::chat.WelcomeNotification welcome_;
    public bool HasWelcome {
      get { return hasWelcome; }
    }
    public global::chat.WelcomeNotification Welcome {
      get { return welcome_ ?? global::chat.WelcomeNotification.DefaultInstance; }
    }
    
    public const int ScreenFieldNumber = 4;
    private bool hasScreen;
    private global::chat.ScreenNotification screen_;
    public bool HasScreen {
      get { return hasScreen; }
    }
    public global::chat.ScreenNotification Screen {
      get { return screen_ ?? global::chat.ScreenNotification.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasFriend) {
          if (!Friend.IsInitialized) return false;
        }
        if (HasMsg) {
          if (!Msg.IsInitialized) return false;
        }
        if (HasWelcome) {
          if (!Welcome.IsInitialized) return false;
        }
        if (HasScreen) {
          if (!Screen.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _notificationFieldNames;
      if (hasFriend) {
        output.WriteMessage(1, field_names[0], Friend);
      }
      if (hasMsg) {
        output.WriteMessage(2, field_names[1], Msg);
      }
      if (hasWelcome) {
        output.WriteMessage(3, field_names[3], Welcome);
      }
      if (hasScreen) {
        output.WriteMessage(4, field_names[2], Screen);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasFriend) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Friend);
      }
      if (hasMsg) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, Msg);
      }
      if (hasWelcome) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, Welcome);
      }
      if (hasScreen) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, Screen);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Notification ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Notification ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Notification ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Notification ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Notification ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Notification ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Notification ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Notification ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Notification ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Notification ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Notification MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Notification prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Notification, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Notification cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Notification result;
      
      private Notification PrepareBuilder() {
        if (resultIsReadOnly) {
          Notification original = result;
          result = new Notification();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Notification MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::chat.Notification.Descriptor; }
      }
      
      public override Notification DefaultInstanceForType {
        get { return global::chat.Notification.DefaultInstance; }
      }
      
      public override Notification BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Notification) {
          return MergeFrom((Notification) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Notification other) {
        if (other == global::chat.Notification.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasFriend) {
          MergeFriend(other.Friend);
        }
        if (other.HasMsg) {
          MergeMsg(other.Msg);
        }
        if (other.HasWelcome) {
          MergeWelcome(other.Welcome);
        }
        if (other.HasScreen) {
          MergeScreen(other.Screen);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_notificationFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _notificationFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::chat.FriendNotification.Builder subBuilder = global::chat.FriendNotification.CreateBuilder();
              if (result.hasFriend) {
                subBuilder.MergeFrom(Friend);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Friend = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::chat.MessageNotification.Builder subBuilder = global::chat.MessageNotification.CreateBuilder();
              if (result.hasMsg) {
                subBuilder.MergeFrom(Msg);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Msg = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::chat.WelcomeNotification.Builder subBuilder = global::chat.WelcomeNotification.CreateBuilder();
              if (result.hasWelcome) {
                subBuilder.MergeFrom(Welcome);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Welcome = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::chat.ScreenNotification.Builder subBuilder = global::chat.ScreenNotification.CreateBuilder();
              if (result.hasScreen) {
                subBuilder.MergeFrom(Screen);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Screen = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasFriend {
       get { return result.hasFriend; }
      }
      public global::chat.FriendNotification Friend {
        get { return result.Friend; }
        set { SetFriend(value); }
      }
      public Builder SetFriend(global::chat.FriendNotification value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFriend = true;
        result.friend_ = value;
        return this;
      }
      public Builder SetFriend(global::chat.FriendNotification.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasFriend = true;
        result.friend_ = builderForValue.Build();
        return this;
      }
      public Builder MergeFriend(global::chat.FriendNotification value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasFriend &&
            result.friend_ != global::chat.FriendNotification.DefaultInstance) {
            result.friend_ = global::chat.FriendNotification.CreateBuilder(result.friend_).MergeFrom(value).BuildPartial();
        } else {
          result.friend_ = value;
        }
        result.hasFriend = true;
        return this;
      }
      public Builder ClearFriend() {
        PrepareBuilder();
        result.hasFriend = false;
        result.friend_ = null;
        return this;
      }
      
      public bool HasMsg {
       get { return result.hasMsg; }
      }
      public global::chat.MessageNotification Msg {
        get { return result.Msg; }
        set { SetMsg(value); }
      }
      public Builder SetMsg(global::chat.MessageNotification value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMsg = true;
        result.msg_ = value;
        return this;
      }
      public Builder SetMsg(global::chat.MessageNotification.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasMsg = true;
        result.msg_ = builderForValue.Build();
        return this;
      }
      public Builder MergeMsg(global::chat.MessageNotification value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasMsg &&
            result.msg_ != global::chat.MessageNotification.DefaultInstance) {
            result.msg_ = global::chat.MessageNotification.CreateBuilder(result.msg_).MergeFrom(value).BuildPartial();
        } else {
          result.msg_ = value;
        }
        result.hasMsg = true;
        return this;
      }
      public Builder ClearMsg() {
        PrepareBuilder();
        result.hasMsg = false;
        result.msg_ = null;
        return this;
      }
      
      public bool HasWelcome {
       get { return result.hasWelcome; }
      }
      public global::chat.WelcomeNotification Welcome {
        get { return result.Welcome; }
        set { SetWelcome(value); }
      }
      public Builder SetWelcome(global::chat.WelcomeNotification value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasWelcome = true;
        result.welcome_ = value;
        return this;
      }
      public Builder SetWelcome(global::chat.WelcomeNotification.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasWelcome = true;
        result.welcome_ = builderForValue.Build();
        return this;
      }
      public Builder MergeWelcome(global::chat.WelcomeNotification value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasWelcome &&
            result.welcome_ != global::chat.WelcomeNotification.DefaultInstance) {
            result.welcome_ = global::chat.WelcomeNotification.CreateBuilder(result.welcome_).MergeFrom(value).BuildPartial();
        } else {
          result.welcome_ = value;
        }
        result.hasWelcome = true;
        return this;
      }
      public Builder ClearWelcome() {
        PrepareBuilder();
        result.hasWelcome = false;
        result.welcome_ = null;
        return this;
      }
      
      public bool HasScreen {
       get { return result.hasScreen; }
      }
      public global::chat.ScreenNotification Screen {
        get { return result.Screen; }
        set { SetScreen(value); }
      }
      public Builder SetScreen(global::chat.ScreenNotification value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasScreen = true;
        result.screen_ = value;
        return this;
      }
      public Builder SetScreen(global::chat.ScreenNotification.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasScreen = true;
        result.screen_ = builderForValue.Build();
        return this;
      }
      public Builder MergeScreen(global::chat.ScreenNotification value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasScreen &&
            result.screen_ != global::chat.ScreenNotification.DefaultInstance) {
            result.screen_ = global::chat.ScreenNotification.CreateBuilder(result.screen_).MergeFrom(value).BuildPartial();
        } else {
          result.screen_ = value;
        }
        result.hasScreen = true;
        return this;
      }
      public Builder ClearScreen() {
        PrepareBuilder();
        result.hasScreen = false;
        result.screen_ = null;
        return this;
      }
    }
    static Notification() {
      object.ReferenceEquals(global::chat.Protocol.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Message : pb::GeneratedMessage<Message, Message.Builder> {
    private Message() { }
    private static readonly Message defaultInstance = new Message().MakeReadOnly();
    private static readonly string[] _messageFieldNames = new string[] { "msg_type", "notification", "request", "response", "sequence", "session_id" };
    private static readonly uint[] _messageFieldTags = new uint[] { 8, 50, 34, 42, 21, 29 };
    public static Message DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Message DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Message ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::chat.Protocol.internal__static_chat_Message__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Message, Message.Builder> InternalFieldAccessors {
      get { return global::chat.Protocol.internal__static_chat_Message__FieldAccessorTable; }
    }
    
    public const int MsgTypeFieldNumber = 1;
    private bool hasMsgType;
    private global::chat.MSG msgType_ = global::chat.MSG.Login_Request;
    public bool HasMsgType {
      get { return hasMsgType; }
    }
    public global::chat.MSG MsgType {
      get { return msgType_; }
    }
    
    public const int SequenceFieldNumber = 2;
    private bool hasSequence;
    private uint sequence_;
    public bool HasSequence {
      get { return hasSequence; }
    }
    [global::System.CLSCompliant(false)]
    public uint Sequence {
      get { return sequence_; }
    }
    
    public const int SessionIdFieldNumber = 3;
    private bool hasSessionId;
    private uint sessionId_;
    public bool HasSessionId {
      get { return hasSessionId; }
    }
    [global::System.CLSCompliant(false)]
    public uint SessionId {
      get { return sessionId_; }
    }
    
    public const int RequestFieldNumber = 4;
    private bool hasRequest;
    private global::chat.Request request_;
    public bool HasRequest {
      get { return hasRequest; }
    }
    public global::chat.Request Request {
      get { return request_ ?? global::chat.Request.DefaultInstance; }
    }
    
    public const int ResponseFieldNumber = 5;
    private bool hasResponse;
    private global::chat.Response response_;
    public bool HasResponse {
      get { return hasResponse; }
    }
    public global::chat.Response Response {
      get { return response_ ?? global::chat.Response.DefaultInstance; }
    }
    
    public const int NotificationFieldNumber = 6;
    private bool hasNotification;
    private global::chat.Notification notification_;
    public bool HasNotification {
      get { return hasNotification; }
    }
    public global::chat.Notification Notification {
      get { return notification_ ?? global::chat.Notification.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMsgType) return false;
        if (!hasSequence) return false;
        if (HasRequest) {
          if (!Request.IsInitialized) return false;
        }
        if (HasResponse) {
          if (!Response.IsInitialized) return false;
        }
        if (HasNotification) {
          if (!Notification.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _messageFieldNames;
      if (hasMsgType) {
        output.WriteEnum(1, field_names[0], (int) MsgType, MsgType);
      }
      if (hasSequence) {
        output.WriteFixed32(2, field_names[4], Sequence);
      }
      if (hasSessionId) {
        output.WriteFixed32(3, field_names[5], SessionId);
      }
      if (hasRequest) {
        output.WriteMessage(4, field_names[2], Request);
      }
      if (hasResponse) {
        output.WriteMessage(5, field_names[3], Response);
      }
      if (hasNotification) {
        output.WriteMessage(6, field_names[1], Notification);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasMsgType) {
        size += pb::CodedOutputStream.ComputeEnumSize(1, (int) MsgType);
      }
      if (hasSequence) {
        size += pb::CodedOutputStream.ComputeFixed32Size(2, Sequence);
      }
      if (hasSessionId) {
        size += pb::CodedOutputStream.ComputeFixed32Size(3, SessionId);
      }
      if (hasRequest) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, Request);
      }
      if (hasResponse) {
        size += pb::CodedOutputStream.ComputeMessageSize(5, Response);
      }
      if (hasNotification) {
        size += pb::CodedOutputStream.ComputeMessageSize(6, Notification);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Message ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Message ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Message ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Message ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Message ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Message ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Message ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Message ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Message ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Message ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Message MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Message prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Message, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Message cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Message result;
      
      private Message PrepareBuilder() {
        if (resultIsReadOnly) {
          Message original = result;
          result = new Message();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Message MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::chat.Message.Descriptor; }
      }
      
      public override Message DefaultInstanceForType {
        get { return global::chat.Message.DefaultInstance; }
      }
      
      public override Message BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Message) {
          return MergeFrom((Message) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Message other) {
        if (other == global::chat.Message.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMsgType) {
          MsgType = other.MsgType;
        }
        if (other.HasSequence) {
          Sequence = other.Sequence;
        }
        if (other.HasSessionId) {
          SessionId = other.SessionId;
        }
        if (other.HasRequest) {
          MergeRequest(other.Request);
        }
        if (other.HasResponse) {
          MergeResponse(other.Response);
        }
        if (other.HasNotification) {
          MergeNotification(other.Notification);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_messageFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _messageFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.msgType_, out unknown)) {
                result.hasMsgType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
            case 21: {
              result.hasSequence = input.ReadFixed32(ref result.sequence_);
              break;
            }
            case 29: {
              result.hasSessionId = input.ReadFixed32(ref result.sessionId_);
              break;
            }
            case 34: {
              global::chat.Request.Builder subBuilder = global::chat.Request.CreateBuilder();
              if (result.hasRequest) {
                subBuilder.MergeFrom(Request);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Request = subBuilder.BuildPartial();
              break;
            }
            case 42: {
              global::chat.Response.Builder subBuilder = global::chat.Response.CreateBuilder();
              if (result.hasResponse) {
                subBuilder.MergeFrom(Response);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Response = subBuilder.BuildPartial();
              break;
            }
            case 50: {
              global::chat.Notification.Builder subBuilder = global::chat.Notification.CreateBuilder();
              if (result.hasNotification) {
                subBuilder.MergeFrom(Notification);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Notification = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMsgType {
       get { return result.hasMsgType; }
      }
      public global::chat.MSG MsgType {
        get { return result.MsgType; }
        set { SetMsgType(value); }
      }
      public Builder SetMsgType(global::chat.MSG value) {
        PrepareBuilder();
        result.hasMsgType = true;
        result.msgType_ = value;
        return this;
      }
      public Builder ClearMsgType() {
        PrepareBuilder();
        result.hasMsgType = false;
        result.msgType_ = global::chat.MSG.Login_Request;
        return this;
      }
      
      public bool HasSequence {
        get { return result.hasSequence; }
      }
      [global::System.CLSCompliant(false)]
      public uint Sequence {
        get { return result.Sequence; }
        set { SetSequence(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSequence(uint value) {
        PrepareBuilder();
        result.hasSequence = true;
        result.sequence_ = value;
        return this;
      }
      public Builder ClearSequence() {
        PrepareBuilder();
        result.hasSequence = false;
        result.sequence_ = 0;
        return this;
      }
      
      public bool HasSessionId {
        get { return result.hasSessionId; }
      }
      [global::System.CLSCompliant(false)]
      public uint SessionId {
        get { return result.SessionId; }
        set { SetSessionId(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSessionId(uint value) {
        PrepareBuilder();
        result.hasSessionId = true;
        result.sessionId_ = value;
        return this;
      }
      public Builder ClearSessionId() {
        PrepareBuilder();
        result.hasSessionId = false;
        result.sessionId_ = 0;
        return this;
      }
      
      public bool HasRequest {
       get { return result.hasRequest; }
      }
      public global::chat.Request Request {
        get { return result.Request; }
        set { SetRequest(value); }
      }
      public Builder SetRequest(global::chat.Request value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRequest = true;
        result.request_ = value;
        return this;
      }
      public Builder SetRequest(global::chat.Request.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasRequest = true;
        result.request_ = builderForValue.Build();
        return this;
      }
      public Builder MergeRequest(global::chat.Request value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasRequest &&
            result.request_ != global::chat.Request.DefaultInstance) {
            result.request_ = global::chat.Request.CreateBuilder(result.request_).MergeFrom(value).BuildPartial();
        } else {
          result.request_ = value;
        }
        result.hasRequest = true;
        return this;
      }
      public Builder ClearRequest() {
        PrepareBuilder();
        result.hasRequest = false;
        result.request_ = null;
        return this;
      }
      
      public bool HasResponse {
       get { return result.hasResponse; }
      }
      public global::chat.Response Response {
        get { return result.Response; }
        set { SetResponse(value); }
      }
      public Builder SetResponse(global::chat.Response value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasResponse = true;
        result.response_ = value;
        return this;
      }
      public Builder SetResponse(global::chat.Response.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasResponse = true;
        result.response_ = builderForValue.Build();
        return this;
      }
      public Builder MergeResponse(global::chat.Response value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasResponse &&
            result.response_ != global::chat.Response.DefaultInstance) {
            result.response_ = global::chat.Response.CreateBuilder(result.response_).MergeFrom(value).BuildPartial();
        } else {
          result.response_ = value;
        }
        result.hasResponse = true;
        return this;
      }
      public Builder ClearResponse() {
        PrepareBuilder();
        result.hasResponse = false;
        result.response_ = null;
        return this;
      }
      
      public bool HasNotification {
       get { return result.hasNotification; }
      }
      public global::chat.Notification Notification {
        get { return result.Notification; }
        set { SetNotification(value); }
      }
      public Builder SetNotification(global::chat.Notification value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasNotification = true;
        result.notification_ = value;
        return this;
      }
      public Builder SetNotification(global::chat.Notification.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasNotification = true;
        result.notification_ = builderForValue.Build();
        return this;
      }
      public Builder MergeNotification(global::chat.Notification value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasNotification &&
            result.notification_ != global::chat.Notification.DefaultInstance) {
            result.notification_ = global::chat.Notification.CreateBuilder(result.notification_).MergeFrom(value).BuildPartial();
        } else {
          result.notification_ = value;
        }
        result.hasNotification = true;
        return this;
      }
      public Builder ClearNotification() {
        PrepareBuilder();
        result.hasNotification = false;
        result.notification_ = null;
        return this;
      }
    }
    static Message() {
      object.ReferenceEquals(global::chat.Protocol.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
